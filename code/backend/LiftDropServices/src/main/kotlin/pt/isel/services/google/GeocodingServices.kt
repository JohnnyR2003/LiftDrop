package pt.isel.services.google

import com.google.gson.JsonParser
import jakarta.inject.Named
import okhttp3.OkHttpClient
import okhttp3.Request
import pt.isel.pipeline.pt.isel.liftdrop.Address

@Named("GeocodingServices")
class GeocodingServices {
    val baseUrl: String = "https://maps.googleapis.com/maps/api/geocode/json"

    fun reverseGeocode(
        lat: Double,
        lng: Double,
        apiKey: String,
    ): Address {
        val url = "$baseUrl?latlng=$lat,$lng&key=$apiKey"
        val client = OkHttpClient()
        val request = Request.Builder().url(url).build()
        val response = client.newCall(request).execute()

        val body = response.body?.string() ?: throw Exception("Empty response from geocoding API")

        val json = JsonParser.parseString(body).asJsonObject
        val results = json["results"].asJsonArray
        if (results.size() == 0) throw Exception("No address found")

        val addressComponents = results[0].asJsonObject["address_components"].asJsonArray

        var country = ""
        var city = ""
        var street = ""
        var zip = ""
        var houseNumber = ""

        for (component in addressComponents) {
            val types = component.asJsonObject["types"].asJsonArray.map { it.asString }
            when {
                "country" in types -> country = component.asJsonObject["long_name"].asString
                "locality" in types || "administrative_area_level_2" in types -> city = component.asJsonObject["long_name"].asString
                "route" in types -> street = component.asJsonObject["long_name"].asString
                "postal_code" in types -> zip = component.asJsonObject["long_name"].asString
                "street_number" in types -> houseNumber = component.asJsonObject["long_name"].asString
            }
        }

        return Address(
            id = 0, // mock id, as the real id is gonna be generated by the database
            country = country,
            city = city,
            street = street,
            zipCode = zip,
            streetNumber = houseNumber,
            floor = null,
        )
    }
}
